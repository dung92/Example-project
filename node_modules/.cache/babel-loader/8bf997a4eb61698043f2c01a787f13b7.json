{"ast":null,"code":"var _jsxFileName = \"D:\\\\project-example\\\\src\\\\pages\\\\Login.tsx\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport Firebase from 'firebase/app';\nimport { Box, MenuItem, Button, TextField, Grid, Hidden, makeStyles } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport firebase from '../config/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  rootSelect: {\n    '& .MuiSelect-root': {\n      display: 'flex'\n    }\n  },\n  rootButton: {\n    paddingTop: 0\n  },\n  rootVerifyButton: {\n    '& .MuiButton-label': {\n      padding: '0px 30px 0px 30px'\n    }\n  }\n}));\nexport const Login = props => {\n  _s();\n\n  const classes = useStyles();\n  const validationSchema = yup.object().shape({\n    phone: yup.string().required('Phone is required'),\n    countryCode: yup.number().required('Country is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      countryCode: 65,\n      phone: 0\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      const valueSubmitPhone = { ...values\n      };\n      let verify = new Firebase.auth.RecaptchaVerifier('recaptcha-container');\n      firebase.auth().signInWithPhoneNumber(valueSubmitPhone.phone.toString(), verify).then(confirmationResult => {\n        setSubmitting(false);\n      }).catch(error => {\n        console.log(\"SMS not sent\");\n      });\n    },\n    children: ({\n      errors,\n      touched,\n      submitForm\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        margin: '20px 0px 20px 0px ',\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              name: \"countryCode\",\n              children: ({\n                field\n              }) => /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-select-currency\",\n                value: field.value || '',\n                onChange: field.onChange,\n                name: field.name,\n                variant: \"outlined\",\n                error: !!errors.countryCode && touched.phone,\n                helperText: !!errors.countryCode && touched.countryCode ? errors.countryCode : '',\n                label: \"Country\",\n                select: true,\n                fullWidth: true,\n                className: classes.rootSelect,\n                children: props.countryCodeArray.map((item, key) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: item.dial_code,\n                  children: `+${item.dial_code}`\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        margin: '20px 0px 20px 0px ',\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              name: \"phone\",\n              children: ({\n                field\n              }) => /*#__PURE__*/_jsxDEV(TextField, {\n                value: field.value || '',\n                onChange: field.onChange,\n                name: field.name,\n                variant: \"outlined\",\n                label: \"Phone Number\",\n                error: !!errors.phone && touched.phone,\n                helperText: !!errors.phone && touched.phone ? errors.phone : '',\n                fullWidth: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Hidden, {\n          only: \"xs\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: submitForm,\n            className: classes.rootVerifyButton,\n            children: \"Verify Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n          only: \"lg\",\n          smUp: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: submitForm,\n            fullWidth: true,\n            className: classes.rootVerifyButton,\n            children: \"Verify Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Login;\nLogin.prototype = {\n  countryCodeArray: PropTypes.arrayOf(PropTypes.shape({\n    code: PropTypes.string,\n    dial_code: PropTypes.string\n  }))\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/project-example/src/pages/Login.tsx"],"names":["Formik","Form","Field","yup","Firebase","Box","MenuItem","Button","TextField","Grid","Hidden","makeStyles","PropTypes","firebase","useStyles","rootSelect","display","rootButton","paddingTop","rootVerifyButton","padding","Login","props","classes","validationSchema","object","shape","phone","string","required","countryCode","number","values","setSubmitting","valueSubmitPhone","verify","auth","RecaptchaVerifier","signInWithPhoneNumber","toString","then","confirmationResult","catch","error","console","log","errors","touched","submitForm","field","value","onChange","name","countryCodeArray","map","item","key","dial_code","prototype","arrayOf","code"],"mappings":"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","sourcesContent":["import { FormikHelpers, Formik, Form, Field, FieldProps } from 'formik';\r\nimport * as yup from 'yup';\r\nimport Firebase from 'firebase/app';\r\nimport { Box, MenuItem, Button, TextField, Grid, Hidden, makeStyles } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport firebase from '../config/firebase';\r\nimport { ModelVerifyNumber } from '../model/ModelVerifyNumber';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    rootSelect: {\r\n        '& .MuiSelect-root': {\r\n            display: 'flex'\r\n        }\r\n    },\r\n    rootButton: {\r\n        paddingTop: 0\r\n    },\r\n    rootVerifyButton: {\r\n        '& .MuiButton-label': {\r\n            padding: '0px 30px 0px 30px'\r\n        }\r\n\r\n    }\r\n}));\r\n\r\nexport const Login = (props: {\r\n    countryCodeArray: Array<{\r\n        code: string,\r\n        dial_code: string\r\n    }>,\r\n}) => {\r\n    const classes = useStyles();\r\n    const validationSchema = yup.object().shape({\r\n        phone: yup.string()\r\n            .required('Phone is required'),\r\n        countryCode: yup.number()\r\n            .required('Country is required'),\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                countryCode: 65,\r\n                phone: 0\r\n            }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(\r\n                values: ModelVerifyNumber,\r\n                { setSubmitting }: FormikHelpers<ModelVerifyNumber>\r\n            ) => {\r\n                \r\n                const valueSubmitPhone = { ...values };\r\n                let verify = new Firebase.auth.RecaptchaVerifier('recaptcha-container');\r\n                firebase.auth().signInWithPhoneNumber(valueSubmitPhone.phone.toString(), verify).then((confirmationResult) => {\r\n                    setSubmitting(false);\r\n                }).catch((error) => {\r\n                    console.log(\"SMS not sent\")\r\n                });\r\n\r\n            }}\r\n        >\r\n            {({ errors, touched, submitForm }) => (\r\n                <Form>\r\n                    <Box margin={'20px 0px 20px 0px '}>\r\n                        <Grid container>\r\n                            <Grid item md={4}>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={4}>\r\n                                <Field\r\n                                    name='countryCode'\r\n                                >\r\n                                    {({\r\n                                        field\r\n                                    }: FieldProps<ModelVerifyNumber>) => (\r\n                                        <TextField\r\n                                            id=\"standard-select-currency\"\r\n                                            value={field.value || ''}\r\n                                            onChange={field.onChange}\r\n                                            name={field.name}\r\n                                            variant=\"outlined\"\r\n                                            error={!!errors.countryCode && touched.phone}\r\n                                            helperText={!!errors.countryCode && touched.countryCode ? errors.countryCode : ''}\r\n                                            label=\"Country\"\r\n                                            select\r\n                                            fullWidth\r\n                                            className={classes.rootSelect}\r\n                                        >\r\n                                            {props.countryCodeArray.map((item, key) =>\r\n                                                <MenuItem key={key} value={item.dial_code}>{`+${item.dial_code}`}</MenuItem>\r\n                                            )}\r\n\r\n                                        </TextField>\r\n\r\n                                    )}\r\n                                </Field>\r\n                            </Grid>\r\n                            <Grid item md={4}>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                    <Box margin={'20px 0px 20px 0px '}>\r\n                        <Grid container>\r\n                            <Grid item md={4}>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={4}>\r\n                                <Field\r\n                                    name='phone'\r\n                                >\r\n                                    {({\r\n                                        field\r\n                                    }: FieldProps<ModelVerifyNumber>) => (\r\n                                        <TextField\r\n                                            value={field.value || ''}\r\n                                            onChange={field.onChange}\r\n                                            name={field.name}\r\n                                            variant=\"outlined\"\r\n                                            label=\"Phone Number\"\r\n                                            error={!!errors.phone && touched.phone}\r\n                                            helperText={!!errors.phone && touched.phone ? errors.phone : ''}\r\n                                            fullWidth\r\n                                        />\r\n                                    )}\r\n                                </Field>\r\n                            </Grid>\r\n                            <Grid item md={4}>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                    <Box>\r\n                        <Hidden only=\"xs\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={submitForm}\r\n                                className={classes.rootVerifyButton}\r\n                            >\r\n                                Verify Number\r\n                            </Button>\r\n                        </Hidden>\r\n\r\n                        <Hidden only=\"lg\" smUp>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={submitForm}\r\n                                fullWidth\r\n                                className={classes.rootVerifyButton}\r\n                            >\r\n                                Verify Number\r\n                            </Button>\r\n                        </Hidden>\r\n\r\n                    </Box>\r\n\r\n                   \r\n                   \r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\nLogin.prototype = {\r\n    countryCodeArray: PropTypes.arrayOf(PropTypes.shape({\r\n        code: PropTypes.string,\r\n        dial_code: PropTypes.string\r\n    }))\r\n}"]},"metadata":{},"sourceType":"module"}